/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_miniBeta_5 (
    input clk,
    input rst,
    input whitebutton,
    input greenbutton,
    input startbutton,
    output reg [7:0] p1_seg,
    output reg [7:0] p2_seg,
    output reg [7:0] rounds_seg,
    output reg [1:0] p1_sel,
    output reg [1:0] p2_sel,
    output reg [1:0] rounds_sel,
    output reg green,
    output reg red
  );
  
  
  
  wire [16-1:0] M_game_alu_out;
  wire [1-1:0] M_game_alu_z;
  wire [1-1:0] M_game_alu_v;
  wire [1-1:0] M_game_alu_n;
  reg [16-1:0] M_game_alu_x;
  reg [16-1:0] M_game_alu_y;
  reg [6-1:0] M_game_alu_alufn;
  alu_16_7 game_alu (
    .x(M_game_alu_x),
    .y(M_game_alu_y),
    .alufn(M_game_alu_alufn),
    .out(M_game_alu_out),
    .z(M_game_alu_z),
    .v(M_game_alu_v),
    .n(M_game_alu_n)
  );
  
  wire [16-1:0] M_add_value_addvalue;
  reg [16-1:0] M_add_value_sequenceCount;
  addValue_8 add_value (
    .sequenceCount(M_add_value_sequenceCount),
    .addvalue(M_add_value_addvalue)
  );
  
  reg [15:0] inputAlu_a;
  
  reg [15:0] inputAlu_b;
  
  wire [1-1:0] M_control_unit_green;
  wire [1-1:0] M_control_unit_red;
  wire [1-1:0] M_control_unit_we;
  wire [4-1:0] M_control_unit_ra;
  wire [4-1:0] M_control_unit_rb;
  wire [4-1:0] M_control_unit_rc;
  wire [2-1:0] M_control_unit_asel;
  wire [3-1:0] M_control_unit_bsel;
  wire [2-1:0] M_control_unit_wdsel;
  wire [6-1:0] M_control_unit_alufn;
  wire [8-1:0] M_control_unit_p1_seg;
  wire [2-1:0] M_control_unit_p1_sel;
  wire [8-1:0] M_control_unit_p2_seg;
  wire [2-1:0] M_control_unit_p2_sel;
  wire [8-1:0] M_control_unit_rounds_seg;
  wire [2-1:0] M_control_unit_rounds_sel;
  reg [1-1:0] M_control_unit_greenbutton;
  reg [1-1:0] M_control_unit_whitebutton;
  reg [1-1:0] M_control_unit_startbutton;
  reg [1-1:0] M_control_unit_isP1;
  reg [16-1:0] M_control_unit_tempvar1;
  reg [16-1:0] M_control_unit_tempvar2;
  reg [1-1:0] M_control_unit_tempvar3;
  reg [16-1:0] M_control_unit_p1Score;
  reg [16-1:0] M_control_unit_p2Score;
  reg [16-1:0] M_control_unit_rounds;
  reg [1-1:0] M_control_unit_winner;
  game_cu_9 control_unit (
    .clk(clk),
    .rst(rst),
    .greenbutton(M_control_unit_greenbutton),
    .whitebutton(M_control_unit_whitebutton),
    .startbutton(M_control_unit_startbutton),
    .isP1(M_control_unit_isP1),
    .tempvar1(M_control_unit_tempvar1),
    .tempvar2(M_control_unit_tempvar2),
    .tempvar3(M_control_unit_tempvar3),
    .p1Score(M_control_unit_p1Score),
    .p2Score(M_control_unit_p2Score),
    .rounds(M_control_unit_rounds),
    .winner(M_control_unit_winner),
    .green(M_control_unit_green),
    .red(M_control_unit_red),
    .we(M_control_unit_we),
    .ra(M_control_unit_ra),
    .rb(M_control_unit_rb),
    .rc(M_control_unit_rc),
    .asel(M_control_unit_asel),
    .bsel(M_control_unit_bsel),
    .wdsel(M_control_unit_wdsel),
    .alufn(M_control_unit_alufn),
    .p1_seg(M_control_unit_p1_seg),
    .p1_sel(M_control_unit_p1_sel),
    .p2_seg(M_control_unit_p2_seg),
    .p2_sel(M_control_unit_p2_sel),
    .rounds_seg(M_control_unit_rounds_seg),
    .rounds_sel(M_control_unit_rounds_sel)
  );
  wire [16-1:0] M_register_file_out_a;
  wire [16-1:0] M_register_file_out_b;
  wire [1-1:0] M_register_file_isP1;
  wire [16-1:0] M_register_file_tempvar1;
  wire [16-1:0] M_register_file_tempvar2;
  wire [1-1:0] M_register_file_tempvar3;
  wire [16-1:0] M_register_file_p1Score;
  wire [16-1:0] M_register_file_p2Score;
  wire [16-1:0] M_register_file_rounds;
  wire [16-1:0] M_register_file_sequenceCount;
  wire [1-1:0] M_register_file_winnerOut;
  reg [4-1:0] M_register_file_rc;
  reg [1-1:0] M_register_file_we;
  reg [16-1:0] M_register_file_data;
  reg [4-1:0] M_register_file_ra;
  reg [4-1:0] M_register_file_rb;
  game_miniRegfile_10 register_file (
    .clk(clk),
    .rst(rst),
    .rc(M_register_file_rc),
    .we(M_register_file_we),
    .data(M_register_file_data),
    .ra(M_register_file_ra),
    .rb(M_register_file_rb),
    .out_a(M_register_file_out_a),
    .out_b(M_register_file_out_b),
    .isP1(M_register_file_isP1),
    .tempvar1(M_register_file_tempvar1),
    .tempvar2(M_register_file_tempvar2),
    .tempvar3(M_register_file_tempvar3),
    .p1Score(M_register_file_p1Score),
    .p2Score(M_register_file_p2Score),
    .rounds(M_register_file_rounds),
    .sequenceCount(M_register_file_sequenceCount),
    .winnerOut(M_register_file_winnerOut)
  );
  
  always @* begin
    M_control_unit_isP1 = M_register_file_isP1;
    M_control_unit_tempvar1 = M_register_file_tempvar1;
    M_control_unit_tempvar2 = M_register_file_tempvar2;
    M_control_unit_tempvar3 = M_register_file_tempvar3;
    M_control_unit_p1Score = M_register_file_p1Score;
    M_control_unit_p2Score = M_register_file_p2Score;
    M_control_unit_rounds = M_register_file_rounds;
    M_control_unit_winner = M_register_file_winnerOut;
    M_add_value_sequenceCount = M_register_file_sequenceCount;
    M_control_unit_greenbutton = greenbutton;
    M_control_unit_whitebutton = whitebutton;
    M_control_unit_startbutton = startbutton;
    M_register_file_ra = M_control_unit_ra;
    M_register_file_rb = M_control_unit_rb;
    M_register_file_rc = M_control_unit_rc;
    M_register_file_we = M_control_unit_we;
    
    case (M_control_unit_asel)
      2'h0: begin
        inputAlu_a = M_register_file_out_a;
      end
      2'h1: begin
        inputAlu_a = M_add_value_addvalue;
      end
      default: begin
        inputAlu_a = 16'h0000;
      end
    endcase
    
    case (M_control_unit_bsel)
      3'h0: begin
        inputAlu_b = M_register_file_out_b;
      end
      3'h1: begin
        inputAlu_b = 16'h0000;
      end
      3'h2: begin
        inputAlu_b = 16'h0001;
      end
      3'h3: begin
        inputAlu_b = 16'h0005;
      end
      3'h4: begin
        inputAlu_b = 16'h000f;
      end
      3'h5: begin
        inputAlu_b = 72'h000000000000010001;
      end
      default: begin
        inputAlu_b = 16'h0000;
      end
    endcase
    
    case (M_control_unit_wdsel)
      2'h0: begin
        M_register_file_data = M_game_alu_out;
      end
      2'h1: begin
        M_register_file_data = 16'hffff;
      end
      2'h2: begin
        M_register_file_data = 16'h000f;
      end
      2'h3: begin
        M_register_file_data = 16'h0000;
      end
      default: begin
        M_register_file_data = M_game_alu_out;
      end
    endcase
    M_game_alu_x = inputAlu_a;
    M_game_alu_y = inputAlu_b;
    M_game_alu_alufn = M_control_unit_alufn;
    p1_seg = M_control_unit_p1_seg;
    p1_sel = M_control_unit_p1_sel;
    p2_seg = M_control_unit_p2_seg;
    p2_sel = M_control_unit_p2_sel;
    rounds_seg = M_control_unit_rounds_seg;
    rounds_sel = M_control_unit_rounds_sel;
    green = M_control_unit_green;
    red = M_control_unit_red;
  end
endmodule
