/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_cu_9 (
    input clk,
    input rst,
    input greenbutton,
    input whitebutton,
    input startbutton,
    input isP1,
    input [15:0] tempvar1,
    input [15:0] tempvar2,
    input tempvar3,
    input [15:0] p1Score,
    input [15:0] p2Score,
    input [15:0] rounds,
    input winner,
    output reg green,
    output reg red,
    output reg we,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [3:0] rc,
    output reg [1:0] asel,
    output reg [2:0] bsel,
    output reg [1:0] wdsel,
    output reg [5:0] alufn,
    output reg [7:0] p1_seg,
    output reg [1:0] p1_sel,
    output reg [7:0] p2_seg,
    output reg [1:0] p2_sel,
    output reg [7:0] rounds_seg,
    output reg [1:0] rounds_sel
  );
  
  
  
  localparam IDLE_INIT_game_fsm = 6'd0;
  localparam START_game_fsm = 6'd1;
  localparam SEVENTEEN_game_fsm = 6'd2;
  localparam P1_INIT_SEQUENCE_game_fsm = 6'd3;
  localparam P2_INIT_SEQUENCE_game_fsm = 6'd4;
  localparam SEQUENCE_COUNT_INIT_game_fsm = 6'd5;
  localparam ROUNDS_INIT_game_fsm = 6'd6;
  localparam P1SCORE_INIT_game_fsm = 6'd7;
  localparam P2SCORE_INIT_game_fsm = 6'd8;
  localparam TEMPVAR3_INIT_game_fsm = 6'd9;
  localparam WINNER_INIT_game_fsm = 6'd10;
  localparam IDLE_game_fsm = 6'd11;
  localparam PLAYER1_PRESS_game_fsm = 6'd12;
  localparam P1_INIT_LOOPVAR_game_fsm = 6'd13;
  localparam P1_LOOPVAR_COMPARE_game_fsm = 6'd14;
  localparam P1_BUTTONPRESS_CHECK_game_fsm = 6'd15;
  localparam P1_BUTTONPRESS_game_fsm = 6'd16;
  localparam P1_SET_ADDVALUE_game_fsm = 6'd17;
  localparam P1_INCREMENT_LOOPVAR_game_fsm = 6'd18;
  localparam P1_WRITE_ADDVALUE_game_fsm = 6'd19;
  localparam PLAYER2_PRESS_game_fsm = 6'd20;
  localparam P2_INIT_LOOPVAR_game_fsm = 6'd21;
  localparam P2_LOOPVAR_COMPARE_game_fsm = 6'd22;
  localparam P2_BUTTONPRESS_CHECK_game_fsm = 6'd23;
  localparam P2_BUTTONPRESS_game_fsm = 6'd24;
  localparam P2_SET_ADDVALUE_game_fsm = 6'd25;
  localparam P2_INCREMENT_LOOPVAR_game_fsm = 6'd26;
  localparam P2_WRITE_ADDVALUE_game_fsm = 6'd27;
  localparam COMPARE_SEQUENCECOUNT_ONE_game_fsm = 6'd28;
  localparam SEQUENCE_COUNT_INCREMENT_game_fsm = 6'd29;
  localparam COMPARE_SEQUENCECOUNT_ONE_CHECK_game_fsm = 6'd30;
  localparam NOT_ISP1_SEQUENCECOUNT_1_game_fsm = 6'd31;
  localparam SEVENTEEN_SUBTRACT_game_fsm = 6'd32;
  localparam COMPARE_SEQUENCES_COPY1_game_fsm = 6'd33;
  localparam COMPARE_SEQUENCES_SHIFT1_game_fsm = 6'd34;
  localparam COMPARE_SEQUENCES_COPY2_game_fsm = 6'd35;
  localparam COMPARE_SEQUENCES_SHIFT2_game_fsm = 6'd36;
  localparam COMPARE_SEQUENCES_game_fsm = 6'd37;
  localparam COMPARE_SEQUENCES_CHECK_game_fsm = 6'd38;
  localparam CHECK_ISP1_game_fsm = 6'd39;
  localparam COMPARE_SEQUENCE16_game_fsm = 6'd40;
  localparam COMPARE_SEQUENCE16_CHECK_game_fsm = 6'd41;
  localparam NOT_ISP1_16_game_fsm = 6'd42;
  localparam SEQUENCE_COUNT_INCREMENT_NOTISP1_game_fsm = 6'd43;
  localparam NOT_ISP1_ROUND_game_fsm = 6'd44;
  localparam INIT_SEQCOUNT_ROUND_game_fsm = 6'd45;
  localparam ROUND_INCREMENT_game_fsm = 6'd46;
  localparam ISP1_game_fsm = 6'd47;
  localparam INCREMENT_P2_SCORE_16_game_fsm = 6'd48;
  localparam INCREMENT_P1_SCORE_16_game_fsm = 6'd49;
  localparam COMPARE_ROUNDS_game_fsm = 6'd50;
  localparam INCREMENT_P1_SCORE_game_fsm = 6'd51;
  localparam INCREMENT_P2_SCORE_game_fsm = 6'd52;
  localparam COMPARE_ROUND5_game_fsm = 6'd53;
  localparam COMPARE_ROUND5_CHECK_game_fsm = 6'd54;
  localparam COMPARE_SCORES_LEQ_game_fsm = 6'd55;
  localparam COMPARE_SCORES_LEQ_CHECK_game_fsm = 6'd56;
  localparam COMPARE_SCORES_EQ_game_fsm = 6'd57;
  localparam COMPARE_SCORES_EQ_CHECK_game_fsm = 6'd58;
  localparam P1_WINNER_game_fsm = 6'd59;
  localparam TIE_game_fsm = 6'd60;
  localparam P2_WINNER_game_fsm = 6'd61;
  localparam END_game_fsm = 6'd62;
  
  reg [5:0] M_game_fsm_d, M_game_fsm_q = IDLE_INIT_game_fsm;
  wire [8-1:0] M_seg1_seg;
  wire [2-1:0] M_seg1_sel;
  reg [8-1:0] M_seg1_values;
  multi_seven_seg_15 seg1 (
    .clk(clk),
    .rst(rst),
    .values(M_seg1_values),
    .seg(M_seg1_seg),
    .sel(M_seg1_sel)
  );
  wire [8-1:0] M_seg2_seg;
  wire [2-1:0] M_seg2_sel;
  reg [8-1:0] M_seg2_values;
  multi_seven_seg_15 seg2 (
    .clk(clk),
    .rst(rst),
    .values(M_seg2_values),
    .seg(M_seg2_seg),
    .sel(M_seg2_sel)
  );
  wire [8-1:0] M_seg3_seg;
  wire [2-1:0] M_seg3_sel;
  reg [8-1:0] M_seg3_values;
  multi_seven_seg_15 seg3 (
    .clk(clk),
    .rst(rst),
    .values(M_seg3_values),
    .seg(M_seg3_seg),
    .sel(M_seg3_sel)
  );
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    alufn = 6'h3f;
    asel = 2'h0;
    bsel = 3'h0;
    we = 1'h0;
    ra = 4'h0;
    rb = 4'h0;
    rc = 4'h0;
    green = 1'h0;
    red = 1'h0;
    wdsel = 2'h0;
    M_seg1_values[4+3-:4] = 4'h0;
    M_seg1_values[0+3-:4] = p1Score;
    p1_seg = M_seg1_seg;
    p1_sel = M_seg1_sel;
    M_seg2_values[4+3-:4] = 4'h0;
    M_seg2_values[0+3-:4] = p2Score;
    p2_seg = M_seg2_seg;
    p2_sel = M_seg2_sel;
    M_seg3_values[4+3-:4] = 4'h0;
    M_seg3_values[0+3-:4] = rounds;
    rounds_seg = M_seg3_seg;
    rounds_sel = M_seg3_sel;
    if (startbutton) begin
      M_game_fsm_d = START_game_fsm;
    end else begin
      
      case (M_game_fsm_q)
        IDLE_INIT_game_fsm: begin
          if (startbutton) begin
            M_game_fsm_d = START_game_fsm;
          end else begin
            red = 1'h1;
            green = 1'h1;
            M_game_fsm_d = IDLE_INIT_game_fsm;
          end
        end
        START_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h2;
          rc = 4'h6;
          we = 1'h1;
          M_game_fsm_d = SEVENTEEN_game_fsm;
        end
        SEVENTEEN_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h5;
          rc = 4'hc;
          we = 1'h1;
          M_game_fsm_d = P1_INIT_SEQUENCE_game_fsm;
        end
        P1_INIT_SEQUENCE_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'h0;
          we = 1'h1;
          M_game_fsm_d = P2_INIT_SEQUENCE_game_fsm;
        end
        P2_INIT_SEQUENCE_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'h1;
          we = 1'h1;
          M_game_fsm_d = SEQUENCE_COUNT_INIT_game_fsm;
        end
        SEQUENCE_COUNT_INIT_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h2;
          rc = 4'h2;
          we = 1'h1;
          M_game_fsm_d = ROUNDS_INIT_game_fsm;
        end
        ROUNDS_INIT_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'h5;
          we = 1'h1;
          M_game_fsm_d = P1SCORE_INIT_game_fsm;
        end
        P1SCORE_INIT_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'h3;
          we = 1'h1;
          M_game_fsm_d = P2SCORE_INIT_game_fsm;
        end
        P2SCORE_INIT_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'h4;
          we = 1'h1;
          M_game_fsm_d = TEMPVAR3_INIT_game_fsm;
        end
        TEMPVAR3_INIT_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'he;
          we = 1'h1;
          M_game_fsm_d = WINNER_INIT_game_fsm;
        end
        WINNER_INIT_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'ha;
          we = 1'h1;
          M_game_fsm_d = IDLE_game_fsm;
        end
        IDLE_game_fsm: begin
          if (isP1) begin
            M_game_fsm_d = P1_INIT_LOOPVAR_game_fsm;
          end else begin
            M_game_fsm_d = P2_INIT_LOOPVAR_game_fsm;
          end
        end
        P1_INIT_LOOPVAR_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'hb;
          we = 1'h1;
          M_game_fsm_d = P1_LOOPVAR_COMPARE_game_fsm;
        end
        P1_LOOPVAR_COMPARE_game_fsm: begin
          alufn = 6'h32;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'hb;
          rb = 4'h2;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = P1_BUTTONPRESS_CHECK_game_fsm;
        end
        P1_BUTTONPRESS_CHECK_game_fsm: begin
          if (tempvar1) begin
            M_game_fsm_d = P1_BUTTONPRESS_game_fsm;
          end else begin
            M_game_fsm_d = COMPARE_SEQUENCECOUNT_ONE_game_fsm;
          end
        end
        P1_BUTTONPRESS_game_fsm: begin
          green = 1'h1;
          red = 1'h0;
          if (whitebutton) begin
            M_game_fsm_d = P1_INCREMENT_LOOPVAR_game_fsm;
          end else begin
            if (greenbutton) begin
              M_game_fsm_d = P1_SET_ADDVALUE_game_fsm;
            end else begin
              if (tempvar3) begin
                M_game_fsm_d = P1_BUTTONPRESS_game_fsm;
              end else begin
                M_game_fsm_d = P1_BUTTONPRESS_game_fsm;
              end
            end
          end
        end
        P1_SET_ADDVALUE_game_fsm: begin
          alufn = 6'h13;
          asel = 2'h1;
          bsel = 3'h0;
          rc = 4'h9;
          we = 1'h1;
          M_game_fsm_d = P1_WRITE_ADDVALUE_game_fsm;
        end
        P1_WRITE_ADDVALUE_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h0;
          rb = 4'h9;
          rc = 4'h0;
          we = 1'h1;
          M_game_fsm_d = P1_INCREMENT_LOOPVAR_game_fsm;
        end
        P1_INCREMENT_LOOPVAR_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'hb;
          rc = 4'hb;
          we = 1'h1;
          M_game_fsm_d = P1_LOOPVAR_COMPARE_game_fsm;
        end
        P2_INIT_LOOPVAR_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'hb;
          we = 1'h1;
          M_game_fsm_d = P2_LOOPVAR_COMPARE_game_fsm;
        end
        P2_LOOPVAR_COMPARE_game_fsm: begin
          alufn = 6'h32;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'hb;
          rb = 4'h2;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = P2_BUTTONPRESS_CHECK_game_fsm;
        end
        P2_BUTTONPRESS_CHECK_game_fsm: begin
          if (tempvar1) begin
            M_game_fsm_d = P2_BUTTONPRESS_game_fsm;
          end else begin
            M_game_fsm_d = COMPARE_SEQUENCECOUNT_ONE_game_fsm;
          end
        end
        P2_BUTTONPRESS_game_fsm: begin
          green = 1'h0;
          red = 1'h1;
          if (whitebutton) begin
            M_game_fsm_d = P2_INCREMENT_LOOPVAR_game_fsm;
          end else begin
            if (greenbutton) begin
              M_game_fsm_d = P2_SET_ADDVALUE_game_fsm;
            end else begin
              if (tempvar3) begin
                M_game_fsm_d = P2_BUTTONPRESS_game_fsm;
              end else begin
                M_game_fsm_d = P2_BUTTONPRESS_game_fsm;
              end
            end
          end
        end
        P2_SET_ADDVALUE_game_fsm: begin
          alufn = 6'h13;
          asel = 2'h1;
          bsel = 3'h0;
          rc = 4'h9;
          we = 1'h1;
          M_game_fsm_d = P2_WRITE_ADDVALUE_game_fsm;
        end
        P2_WRITE_ADDVALUE_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h1;
          rb = 4'h9;
          rc = 4'h1;
          we = 1'h1;
          M_game_fsm_d = P2_INCREMENT_LOOPVAR_game_fsm;
        end
        P2_INCREMENT_LOOPVAR_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'hb;
          rc = 4'hb;
          we = 1'h1;
          M_game_fsm_d = P2_LOOPVAR_COMPARE_game_fsm;
        end
        COMPARE_SEQUENCECOUNT_ONE_game_fsm: begin
          alufn = 6'h33;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h2;
          rc = 4'h8;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCECOUNT_ONE_CHECK_game_fsm;
        end
        COMPARE_SEQUENCECOUNT_ONE_CHECK_game_fsm: begin
          if (tempvar2) begin
            M_game_fsm_d = NOT_ISP1_SEQUENCECOUNT_1_game_fsm;
          end else begin
            M_game_fsm_d = SEVENTEEN_SUBTRACT_game_fsm;
          end
        end
        NOT_ISP1_SEQUENCECOUNT_1_game_fsm: begin
          alufn = 6'h1b;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h6;
          rc = 4'h6;
          we = 1'h1;
          M_game_fsm_d = SEQUENCE_COUNT_INCREMENT_game_fsm;
        end
        SEQUENCE_COUNT_INCREMENT_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h2;
          rc = 4'h2;
          we = 1'h1;
          M_game_fsm_d = IDLE_game_fsm;
        end
        SEVENTEEN_SUBTRACT_game_fsm: begin
          alufn = 6'h01;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'hc;
          rb = 4'h2;
          rc = 4'hd;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCES_COPY1_game_fsm;
        end
        COMPARE_SEQUENCES_COPY1_game_fsm: begin
          alufn = 6'h13;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h0;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCES_SHIFT1_game_fsm;
        end
        COMPARE_SEQUENCES_SHIFT1_game_fsm: begin
          alufn = 6'h20;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h7;
          rb = 4'hd;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCES_COPY2_game_fsm;
        end
        COMPARE_SEQUENCES_COPY2_game_fsm: begin
          alufn = 6'h13;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h1;
          rc = 4'h8;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCES_SHIFT2_game_fsm;
        end
        COMPARE_SEQUENCES_SHIFT2_game_fsm: begin
          alufn = 6'h20;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h8;
          rb = 4'hd;
          rc = 4'h8;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCES_game_fsm;
        end
        COMPARE_SEQUENCES_game_fsm: begin
          alufn = 6'h31;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h7;
          rb = 4'h8;
          rc = 4'he;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCES_CHECK_game_fsm;
        end
        COMPARE_SEQUENCES_CHECK_game_fsm: begin
          if (tempvar3) begin
            M_game_fsm_d = COMPARE_SEQUENCE16_game_fsm;
          end else begin
            M_game_fsm_d = ISP1_game_fsm;
          end
        end
        COMPARE_SEQUENCE16_game_fsm: begin
          alufn = 6'h32;
          asel = 2'h0;
          bsel = 3'h4;
          ra = 4'h2;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SEQUENCE16_CHECK_game_fsm;
        end
        COMPARE_SEQUENCE16_CHECK_game_fsm: begin
          if (tempvar1) begin
            M_game_fsm_d = NOT_ISP1_16_game_fsm;
          end else begin
            M_game_fsm_d = INCREMENT_P1_SCORE_16_game_fsm;
          end
        end
        NOT_ISP1_16_game_fsm: begin
          alufn = 6'h1b;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h6;
          rc = 4'h6;
          we = 1'h1;
          M_game_fsm_d = SEQUENCE_COUNT_INCREMENT_NOTISP1_game_fsm;
        end
        SEQUENCE_COUNT_INCREMENT_NOTISP1_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h2;
          rc = 4'h2;
          we = 1'h1;
          M_game_fsm_d = IDLE_game_fsm;
        end
        INCREMENT_P1_SCORE_16_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h3;
          rc = 4'h3;
          we = 1'h1;
          M_game_fsm_d = INCREMENT_P2_SCORE_16_game_fsm;
        end
        INCREMENT_P2_SCORE_16_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h4;
          rc = 4'h4;
          we = 1'h1;
          M_game_fsm_d = ROUND_INCREMENT_game_fsm;
        end
        ISP1_game_fsm: begin
          alufn = 6'h31;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h6;
          rc = 4'h8;
          we = 1'h1;
          M_game_fsm_d = CHECK_ISP1_game_fsm;
        end
        CHECK_ISP1_game_fsm: begin
          if (tempvar2) begin
            M_game_fsm_d = INCREMENT_P2_SCORE_game_fsm;
          end else begin
            M_game_fsm_d = INCREMENT_P1_SCORE_game_fsm;
          end
        end
        INCREMENT_P2_SCORE_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h4;
          rc = 4'h4;
          we = 1'h1;
          M_game_fsm_d = ROUND_INCREMENT_game_fsm;
        end
        INCREMENT_P1_SCORE_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h3;
          rc = 4'h3;
          we = 1'h1;
          M_game_fsm_d = ROUND_INCREMENT_game_fsm;
        end
        ROUND_INCREMENT_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 3'h2;
          ra = 4'h5;
          rc = 4'h5;
          we = 1'h1;
          M_game_fsm_d = COMPARE_ROUND5_game_fsm;
        end
        COMPARE_ROUND5_game_fsm: begin
          alufn = 6'h32;
          asel = 2'h0;
          bsel = 3'h3;
          ra = 4'h5;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = COMPARE_ROUND5_CHECK_game_fsm;
        end
        COMPARE_ROUND5_CHECK_game_fsm: begin
          if (tempvar1) begin
            M_game_fsm_d = NOT_ISP1_ROUND_game_fsm;
          end else begin
            M_game_fsm_d = COMPARE_SCORES_LEQ_game_fsm;
          end
        end
        NOT_ISP1_ROUND_game_fsm: begin
          alufn = 6'h1b;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h6;
          rc = 4'h6;
          we = 1'h1;
          M_game_fsm_d = INIT_SEQCOUNT_ROUND_game_fsm;
        end
        INIT_SEQCOUNT_ROUND_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h2;
          rc = 4'h2;
          we = 1'h1;
          M_game_fsm_d = IDLE_game_fsm;
        end
        COMPARE_SCORES_LEQ_game_fsm: begin
          alufn = 6'h33;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h3;
          rb = 4'h4;
          rc = 4'h8;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SCORES_LEQ_CHECK_game_fsm;
        end
        COMPARE_SCORES_LEQ_CHECK_game_fsm: begin
          if (tempvar2) begin
            M_game_fsm_d = COMPARE_SCORES_EQ_game_fsm;
          end else begin
            M_game_fsm_d = P1_WINNER_game_fsm;
          end
        end
        COMPARE_SCORES_EQ_game_fsm: begin
          alufn = 6'h31;
          asel = 2'h0;
          bsel = 3'h0;
          ra = 4'h3;
          rb = 4'h4;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = COMPARE_SCORES_EQ_CHECK_game_fsm;
        end
        COMPARE_SCORES_EQ_CHECK_game_fsm: begin
          if (tempvar1) begin
            M_game_fsm_d = TIE_game_fsm;
          end else begin
            M_game_fsm_d = P2_WINNER_game_fsm;
          end
        end
        P1_WINNER_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h1;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = END_game_fsm;
        end
        P2_WINNER_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h2;
          rc = 4'h7;
          we = 1'h1;
          M_game_fsm_d = END_game_fsm;
        end
        TIE_game_fsm: begin
          alufn = 6'h14;
          asel = 2'h0;
          bsel = 3'h2;
          rc = 4'ha;
          we = 1'h1;
          M_game_fsm_d = END_game_fsm;
        end
        END_game_fsm: begin
          if (winner) begin
            M_game_fsm_d = IDLE_INIT_game_fsm;
          end else begin
            if (tempvar1) begin
              M_game_fsm_d = IDLE_INIT_game_fsm;
            end else begin
              if (startbutton) begin
                M_game_fsm_d = IDLE_INIT_game_fsm;
              end else begin
                M_game_fsm_d = IDLE_INIT_game_fsm;
              end
            end
          end
        end
        default: begin
          M_game_fsm_d = IDLE_INIT_game_fsm;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
